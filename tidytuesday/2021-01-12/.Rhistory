c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
#  addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addProviderTiles(providers$TomTom.Labels) %>%
addPolylines(color = "white", opacity = 0.2, weight =  0.9) %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
}
})
# Combine PNG into GIF
png_files <- list.files("./", pattern = ".*png$", full.names = TRUE)
gifski(png_files, gif_file = "animation.gif", width = 800, height = 600, delay = 1)
alarm()
alarm()
# Combine PNG into GIF
png_files <- list.files("./", pattern = ".*png$", full.names = TRUE)
gifski(png_files, gif_file = "animation.gif", width = 800, height = 600, delay = 1)
1000/60
gifski(png_files, gif_file = "animation.gif", width = 1540, height = 800, delay = 0.1)
gifski(png_files, gif_file = "animation.gif", width = 1540, height = 800, delay = 0.2)
system.time({
for(max in seq(1830, 2025, 5)) {
print(paste0("Producing image for 1823 - ", max))
# Create a path dataframe ----
# Calculate the shape between the place of birth and the geographic location of the Tate museum
path <- left_join(artist, artwork, by = c("id" = "artistId"))
path <- path[c("name","placeOfBirth","year_first_acquired")]
colnames(path) <- c("artist","from", "year_first_acquired")
# Keep only acquisitions during the timeframe
path <- path[path$year_first_acquired <= max,]
# Aggregate to
path <- ddply(path, c("from"), function(x) count(x$from))
# Drop observations where location is missing
path <- path[!is.na(path$from),]
# Add lat and long from the cities df we made earlier
from.ll <- merge(path, cities, all.x = T, by.x = "from", by.y = "place")
# Drop where we didn't have a match to lat/long
from.ll <- from.ll[!is.na(from.ll$lat),]
# calculate routes -- Dateline Break FALSE, otherwise we get a bump in the shifted ggplots
location.ll <- c(-2.7814688, 51.8078055)
rts <- gcIntermediate(location.ll, from.ll[,c('long', 'lat')], 100, breakAtDateLine=FALSE, addStartEnd=TRUE, sp=TRUE)
rts <- as(rts, "SpatialLinesDataFrame")
rts.ff <- fortify(rts)
# Create visual
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
#  addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addProviderTiles(providers$TomTom.Labels) %>%
addPolylines(color = "white", opacity = 0.2, weight =  0.9) %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
}
})
# Combine PNG into GIF
png_files <- list.files("./", pattern = ".*png$", full.names = TRUE)
gifski(png_files, gif_file = "animation.gif", width = 1540, height = 800, delay = 0.2)
# Create visual
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 3,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
#  addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolylines(color = "white", opacity = 0.2, weight =  0.9) %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
# Create text label
rr <- tags$div(
HTML(paste0("<h4>",max,"</h4>"))
)
# Set up environment ----
list.of.packages <- c("tidytuesdayR","tidyverse","plyr","maps","leaflet","gifski","geosphere","mapview","htmltools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
# Create text label
rr <- tags$div(
HTML(paste0("<h4>",max,"</h4>"))
)
rr
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addControl(rr, position = "bottomleft") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white")
# Create text label
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
title <- tags$div(
tag.map.title, HTML("Map title")
)
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white")
title <- tags$div(
tag.map.title, HTML(max)
)
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white")
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addControl(title, position = "bottomleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white")
?addControl
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addControl(title, position = "bottomleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white")
# Create visual
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white")
system.time({
for(max in seq(1830, 2025, 50)) {
print(paste0("Producing image for 1823 - ", max))
# Create a path dataframe ----
# Calculate the shape between the place of birth and the geographic location of the Tate museum
path <- left_join(artist, artwork, by = c("id" = "artistId"))
path <- path[c("name","placeOfBirth","year_first_acquired")]
colnames(path) <- c("artist","from", "year_first_acquired")
# Keep only acquisitions during the timeframe
path <- path[path$year_first_acquired <= max,]
# Aggregate to
path <- ddply(path, c("from"), function(x) count(x$from))
# Drop observations where location is missing
path <- path[!is.na(path$from),]
# Add lat and long from the cities df we made earlier
from.ll <- merge(path, cities, all.x = T, by.x = "from", by.y = "place")
# Drop where we didn't have a match to lat/long
from.ll <- from.ll[!is.na(from.ll$lat),]
# calculate routes -- Dateline Break FALSE, otherwise we get a bump in the shifted ggplots
location.ll <- c(-2.7814688, 51.8078055)
rts <- gcIntermediate(location.ll, from.ll[,c('long', 'lat')], 100, breakAtDateLine=FALSE, addStartEnd=TRUE, sp=TRUE)
rts <- as(rts, "SpatialLinesDataFrame")
rts.ff <- fortify(rts)
# Create text label
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
title <- tags$div(
tag.map.title, HTML(max)
)
# Create visual
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
}
})
# Combine PNG into GIF
png_files <- list.files("./", pattern = ".*png$", full.names = TRUE)
gifski(png_files, gif_file = "animation.gif", width = 1540, height = 800, delay = 0.2)
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
# addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white")
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
#  addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolylines(color = "white", opacity = 0.3, weight =  0.9) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white")
for(max in seq(1830, 2025, 50)) {
print(paste0("Producing image for 1823 - ", max))
# Create a path dataframe ----
# Calculate the shape between the place of birth and the geographic location of the Tate museum
path <- left_join(artist, artwork, by = c("id" = "artistId"))
path <- path[c("name","placeOfBirth","year_first_acquired")]
colnames(path) <- c("artist","from", "year_first_acquired")
# Keep only acquisitions during the timeframe
path <- path[path$year_first_acquired <= max,]
# Aggregate to
path <- ddply(path, c("from"), function(x) count(x$from))
# Drop observations where location is missing
path <- path[!is.na(path$from),]
# Add lat and long from the cities df we made earlier
from.ll <- merge(path, cities, all.x = T, by.x = "from", by.y = "place")
# Drop where we didn't have a match to lat/long
from.ll <- from.ll[!is.na(from.ll$lat),]
# calculate routes -- Dateline Break FALSE, otherwise we get a bump in the shifted ggplots
location.ll <- c(-2.7814688, 51.8078055)
rts <- gcIntermediate(location.ll, from.ll[,c('long', 'lat')], 100, breakAtDateLine=FALSE, addStartEnd=TRUE, sp=TRUE)
rts <- as(rts, "SpatialLinesDataFrame")
rts.ff <- fortify(rts)
# Create text label
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
title <- tags$div(
tag.map.title, HTML(max)
)
# Create visual
rts %>%
leaflet(width = 1540, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addPolylines(color = "white", opacity = 0.3, weight =  0.9) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
}
# Combine PNG into GIF
png_files <- list.files("./", pattern = ".*png$", full.names = TRUE)
gifski(png_files, gif_file = "animation.gif", width = 1540, height = 800, delay = 0.2)
# Create visual
rts %>%
leaflet(width = 940, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addPolylines(color = "white", opacity = 0.3, weight =  0.9) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white")
rts %>%
leaflet(width = 1040, ## default setting for nice visuals
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addPolylines(color = "white", opacity = 0.3, weight =  0.9) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
max
for(max in seq(1830, 2025, 50)) {
print(paste0("Producing image for 1823 - ", max))
# Create a path dataframe ----
# Calculate the shape between the place of birth and the geographic location of the Tate museum
path <- left_join(artist, artwork, by = c("id" = "artistId"))
path <- path[c("name","placeOfBirth","year_first_acquired")]
colnames(path) <- c("artist","from", "year_first_acquired")
# Keep only acquisitions during the timeframe
path <- path[path$year_first_acquired <= max,]
# Aggregate to
path <- ddply(path, c("from"), function(x) count(x$from))
# Drop observations where location is missing
path <- path[!is.na(path$from),]
# Add lat and long from the cities df we made earlier
from.ll <- merge(path, cities, all.x = T, by.x = "from", by.y = "place")
# Drop where we didn't have a match to lat/long
from.ll <- from.ll[!is.na(from.ll$lat),]
# calculate routes -- Dateline Break FALSE, otherwise we get a bump in the shifted ggplots
location.ll <- c(-2.7814688, 51.8078055)
rts <- gcIntermediate(location.ll, from.ll[,c('long', 'lat')], 100, breakAtDateLine=FALSE, addStartEnd=TRUE, sp=TRUE)
rts <- as(rts, "SpatialLinesDataFrame")
rts.ff <- fortify(rts)
# Create text label
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 28px;
}
"))
title <- tags$div(
tag.map.title, HTML(max)
)
# Create visual
rts %>%
leaflet(width = 1040,
height = 800,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addPolylines(color = "white", opacity = 0.3, weight =  0.9) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
}
# Combine PNG into GIF
png_files <- list.files("./", pattern = ".*png$", full.names = TRUE)
gifski(png_files, gif_file = "animation.gif", width = 1040, height = 800, delay = 0.2)
# Create visual
rts %>%
leaflet(width = 1040,
height = 750,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addPolylines(color = "white", opacity = 0.3, weight =  0.9) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
rts %>%
leaflet(width = 1040,
height = 750,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(20, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addPolylines(color = "white", opacity = 0.3, weight =  0.9) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
# Create visual
rts %>%
leaflet(width = 1040,
height = 750,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 20),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addPolylines(color = "white", opacity = 0.3, weight =  0.9) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
# Create visual
rts %>%
leaflet(width = 1150,
height = 750,
## the options below define the initial coordinates (center)
##, the initial zoom (x2) and the bounds of the map
options = leafletOptions(center = c(30, 30),
zoom = 2,
maxBounds = list(c(-90, -120),
c(90,120)))
)  %>%
addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
addPolylines(color = "white", opacity = 0.3, weight =  0.9) %>%
addControl(title, position = "topleft", className="map-title") %>%
addCircles(lat = from.ll$lat, lng = from.ll$long, radius = 1, opacity = 0.5, color = "yellow", stroke = "white") %>%
mapshot(file = paste0("./tate_test",max,".png"))
print(paste0("Latest acquisition : ",max(artwork$year_first_acquired)))
